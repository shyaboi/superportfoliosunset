{"version":3,"sources":["imgs/glow.png","imgs/neckbard.jpg","imgs/github.png","imgs/linked.png","imgs/dawn.png","imgs/epi.png","imgs/groce.png","imgs/poke.png","imgs/namegen.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","class","href","src","glow","alt","namegen","poke","groce","screenSave","dawn","github","linkedIn","neckbard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,iTCuD5BC,MAzCf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cACpB,6BAASC,MAAM,iBAEf,yBAAKA,MAAM,QAAX,KAAoB,uBAAGC,KAAK,8CACxB,yBAAKC,IAAKC,IAAMC,IAAI,wBAExB,yBAAKJ,MAAM,QAAX,KAAoB,uBAAGC,KAAK,8CACxB,yBAAKC,IAAKC,IAAMC,IAAI,wBAExB,yBAAKJ,MAAM,QAAX,KAAoB,uBAAGC,KAAK,yCACxB,yBAAKC,IAAKG,IAASD,IAAI,qBAE3B,yBAAKJ,MAAM,QAAX,KAAoB,uBAAGC,KAAK,sDACxB,yBAAKC,IAAKI,IAAMF,IAAI,cAExB,yBAAKJ,MAAM,QAAX,KAAoB,uBAAGC,KAAK,4CACxB,yBAAKC,IAAKK,IAAOH,IAAI,kBAEzB,yBAAKJ,MAAM,QAAX,KAAoB,uBAAGC,KAAK,yCACxB,yBAAKC,IAAKM,IAAYJ,IAAI,mBAE9B,yBAAKJ,MAAM,QAAX,KAAoB,uBAAGC,KAAK,4CACxB,yBAAKC,IAAKO,IAAML,IAAI,sBAEtB,yBAAKJ,MAAM,QAAX,KAAoB,uBAAGC,KAAK,8BAC1B,yBAAKC,IAAKQ,IAAQN,IAAI,kBAE1B,yBAAKJ,MAAM,QAAO,uBAAGC,KAAK,kDAChB,yBAAKC,IAAKS,IAAUP,IAAI,oBAEhC,yBAAKJ,MAAM,QAAX,IAAmB,0CAAmB,uDAAtC,IAAuE,yBAAKE,IAAKU,IAAUR,IAAI,kBCnCjFS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d9bc519d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/glow.33ae4ae9.png\";","module.exports = __webpack_public_path__ + \"static/media/neckbard.0d76b6a5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/github.88e95f47.png\";","module.exports = __webpack_public_path__ + \"static/media/linked.f9a440a8.png\";","module.exports = __webpack_public_path__ + \"static/media/dawn.4732a3db.png\";","module.exports = __webpack_public_path__ + \"static/media/epi.8b9996d8.png\";","module.exports = __webpack_public_path__ + \"static/media/groce.c6ccbb68.png\";","module.exports = __webpack_public_path__ + \"static/media/poke.16eb7752.png\";","module.exports = __webpack_public_path__ + \"static/media/namegen.12084926.png\";","import React from 'react';\nimport './App.css';\nimport neckbard from './imgs/neckbard.jpg'\nimport github from './imgs/github.png'\nimport linkedIn from './imgs/linked.png'\nimport dawn from './imgs/dawn.png'\nimport screenSave from './imgs/epi.png'\nimport groce from './imgs/groce.png'\nimport poke from './imgs/poke.png'\nimport namegen from './imgs/namegen.png'\nimport glow from './imgs/glow.png'\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n    <section class=\"animated-grid\">\n      \n    <div class=\"card\">  <a href=\"https://shyaboi.github.io/glowingScheduler\">\n        <img src={glow} alt=\"glowing scheduler\"/></a></div>\n\n    <div class=\"card\">  <a href=\"https://shyaboi.github.io/glowingScheduler\">\n        <img src={glow} alt=\"glowing scheduler\"/></a></div>\n\n    <div class=\"card\">  <a href=\"https://shyaboi.github.io/TubularRepo\">\n        <img src={namegen} alt=\"Name Generator\"/></a></div>\n\n    <div class=\"card\">  <a href=\"https://glacial-beyond-53964.herokuapp.com/pokedex\">\n        <img src={poke} alt=\"Pokemon\"/></a></div>\n\n    <div class=\"card\">  <a href=\"https://lorddominic.github.io/grocerEASE\">\n        <img src={groce} alt=\"Grocer Ease\"/></a></div>\n\n    <div class=\"card\">  <a href=\"https://shyaboi.github.io/coolScreens\">\n        <img src={screenSave} alt=\"screen saver\"/></a></div>\n\n    <div class=\"card\">  <a href=\"https://shyaboi.github.io/DawnOfWeather/\">\n        <img src={dawn} alt=\"Dawn of weather\"/></a></div>\n\n      <div class=\"card\">  <a href=\"https://github.com/shyaboi\">\n        <img src={github} alt=\"Github Link\"/></a></div>\n\n    <div class=\"card\"><a href=\"https://www.linkedin.com/in/ian-sears-5931734a\">\n              <img src={linkedIn} alt=\"LinkedIn Link\"/></a></div>\n      \n      <div class=\"card\"> <h1>Ian Sears:</h1><h2>Full Stack Computer Man</h2> <img src={neckbard} alt=\"NeckBard\" /></div>\n    </section>\n         \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}